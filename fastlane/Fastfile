# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

import("./GoogleDrive.rb")
import("./HockeyApp.rb")
import("./Plist.rb")
import("./ShellScript.rb")
import("./UITest.rb")
fastlane_require "colorize"

module Constant
    module PRODUCT_NAME
        BASE = "FastfileTest"
        NOTIFICATION_CONTENT_EXTENSION = ""
        NOTIFICATION_SERVICE_EXTENSION = ""
    end
    BUILD_NUMBER = "1"
    OUT_PUT = "../#{BUILD_NUMBER}"
    IS_THIN = "none"
    TODAY = DateTime.now.strftime("%Y%m%d")
    DERIVEDDATAPATH = "../DerivedData"
#    XCODEVERSION = "10.1"

    module SDK
        SIMULATOR = "iphonesimulator12.1"
        IPHONE = "iphoneos12.2"
    end
    
    module BundleID
        module BASE
            DEV = "com.wayne.FastfileTest"
            PRODUCTION = "com.wayne.FastfileTest"
        end
        module NOTIFICATION_CONTENT_EXTENSION
            DEV = "com.wayne.FastfileTest"
            PRODUCTION = "com.wayne.FastfileTest"
        end
        module NOTIFICATION_SERVICE_EXTENSION
            DEV = "com.wayne.FastfileTest"
            PRODUCTION = "com.wayne.FastfileTest"
        end
    end
    
    module TeamID
        DEV = "94MBHXKUB6"
        PRODUCTION = "94MBHXKUB6"
    end
    
    module SingingIdentity
        DEV = "iPhone Distribution: Yu Han Hsiao (94MBHXKUB6)"
        PRODUCTION = "iPhone Distribution: Yu Han Hsiao (94MBHXKUB6)"
    end
    
    module ProvisioningProfile
        module BASE
            module UUID
                DEV = "48de5cc5-fd4f-4215-b458-40b779d74c47"
                PRODUCTION = "4e378813-4328-4c68-9d10-734610714abd"
            end
            module NAME
                DEV = "Wayne.AdHoc"
                PRODUCTION = "Wayne.AppStore"
            end
        end
        module NOTIFICATION_CONTENT_EXTENSION
            module UUID
                DEV = ""
                PRODUCTION = ""
            end
            module NAME
                DEV = ""
                PRODUCTION = ""
            end
        end
        module NOTIFICATION_SERVICE_EXTENSION
            module UUID
                DEV = ""
                PRODUCTION = ""
            end
            module NAME
                DEV = ""
                PRODUCTION = ""
            end
        end
    end
end

# Parameters
build_number = "1"
output = "../#{build_number}"
is_thin = "none"
today = DateTime.now
today = today.strftime("%Y%m%d")
derivedDataPath = "./DerivedData"
isCompileBitcode = true

default_platform(:ios)

before_all do |lane, options|
    build_number = options[:build_number] ? options[:build_number] : "1"
#    xcversion(version: "#{Constant::XCODEVERSION}")
    isCompileBitcode = options[:is_compile_bitcode] == false ? false : true
    
    if options[:is_clean_derivedData] == true ? true : false
        clean_derivedData
    end
    
    build_number = "#{today}.#{build_number}"
    case lane
        when :dev
        output = "./FastlaneBuilds/dev/#{build_number}"
        when :app_store
        output = "./FastlaneBuilds/app_store/#{build_number}"
        when :simulator
        output = "./FastlaneBuilds/simulator/#{build_number}"
        else
        
    end
    
    if options[:is_thin] == true ? true : false
        is_thin = "thin-for-all-variants"
        else
        is_thin = "none"
    end
end

platform :ios do
    
    lane :syntax_test do
        #UI.message(build_number)
        #version = get_version_number(target: "")
        #update_plist ({
        #  "NewRelicAppVersionString" => "#{version}-DEV",
        #  "NewRelicBuildTagString" => build_number,
        #  "Environment" => "Stage/AliCloud"
        #})
    end
    
    desc "Help to understand usage of iOS lanes."
    lane :help do
        puts <<-eos
        
        simulator
        1. is_clean_carthage_cache - optional default: false
        2. app_version - opitonal
        3. is_update_dependencies - optional default: false
        4. is_export - optional default: false
        5. is_clean_derivedData - optional default: false
        6. build_number - optional default: 1
        
        Dev build
        1. is_clean_carthage_cache - optional default: false
        2. app_version - opitonal
        3. is_update_dependencies - optional default: false
        4. is_export - optional default: false
        5. is_upload_to_hockeyapp - optional default: false
        6. is_compile_bitcode - optional default: true
        7. is_clean_derivedData - optional default: false
        8. build_number - optional default: 1
        9. is_thin - optional default: false
        
        DIQA
        1. is_clean_carthage_cache - optional default: false
        2. app_version - opitonal
        3. is_update_dependencies - optional default: false
        4. is_export - optional default: false
        5. is_upload_to_googledrive - optional default: false
        6. is_compile_bitcode - optional default: true
        7. is_clean_derivedData - optional default: false
        8. build_number - optional default: 1
        
        Re-sign build
        1. path - required: ipa path
        2. type - required: dev / ad_hoc / ingestion
        
        monkey_test
        1. duration - optional: Duration of the test. default: 60 seconds
        2. device - optional: Device the test runing on. default: iPhone SE
        3. prepareInterval - optional: You can set preparation time for indicate to specific feature. default: 0
        4. isShowPaws - optional: Whether to display monkey paws. default: true
        
        eos
    end
    
    # Build Steps
    # 1. Select Xcode version
    # 2. Update Dependencies
    # 3. Update Info.plist (NewRelic, Env)
    # 4. Increase build number
    # 5. Update bundle ID
    # 6. Update Xcode project team
    # 7. Code sign
    # 8. Archive & Export
    
    desc "Simulator build"
    lane :simulator do |options|
        
        is_clean_carthage_cache = options[:is_clean_carthage_cache] == true ? true : false
        updateAppVersion(options[:app_version])
        if options[:is_update_dependencies] == true ? true : false
            update_dependencies(isDebug: true, isCleanCache: is_clean_carthage_cache)
        end
        
        if options[:is_export] == true ? true : false
#            cocoapods(repo_update: false)
            version = get_version_number(target: Constant::PRODUCT_NAME::BASE)
            update_plist ({
                          "NewRelicAppVersionString" => "#{version}-DEV",
                          "NewRelicBuildTagString" => build_number,
                          "Environment" => "Stage"
                          })
            increment_build_number(build_number: build_number)
            update_bundle_id Constant::BundleID::BASE::DEV
            update_project_team(teamid: Constant::TeamID::DEV)
#           code_sign_dev
            xcodebuild(
                       scheme: Constant::PRODUCT_NAME::BASE,
#                      workspace: "./FastfileTest.xcworkspace",
                       derivedDataPath: derivedDataPath,
                       arch: "x86_64",
                       xcargs: "-sdk iphonesimulator -configuration Debug clean build"
                       )
                                     
            productsRootPath = File.expand_path("../#{derivedDataPath}/Build/Products/Debug-iphonesimulator")
            outputRootPath = File.expand_path("../#{output}")
                                     
            if !File.exist? ("#{outputRootPath}")
                FileUtils.mkdir_p ("#{outputRootPath}")
            end
                                     
            if File.exist? ("#{productsRootPath}/#{Constant::PRODUCT_NAME::BASE}.app")
                fileName = "#{Constant::PRODUCT_NAME::BASE}_#{version}(#{build_number})_simulator"
                File.rename("#{productsRootPath}/#{Constant::PRODUCT_NAME::BASE}.app", "#{outputRootPath}/#{fileName}.app")
                zip(path: "#{outputRootPath}/#{fileName}.app", output_path: "#{outputRootPath}/#{fileName}.zip")
            else
                puts "#{Constant::PRODUCT_NAME::BASE}.app not found"
            end
                                     
                                     if File.exist? ("#{productsRootPath}/#{Constant::PRODUCT_NAME::BASE}.app.app.dSYM")
                                         File.rename("#{productsRootPath}/#{Constant::PRODUCT_NAME::BASE}.app.app.dSYM", "#{outputRootPath}/#{Constant::PRODUCT_NAME::BASE}.app.dSYM")
            else
                puts "#{Constant::PRODUCT_NAME::BASE}.app.dSYM not found"
            end
        end
    end
    
    desc "Dev build"
    lane :dev do |options|
        
        is_clean_carthage_cache = options[:is_clean_carthage_cache] == true ? true : false
        updateAppVersion(options[:app_version])
        if options[:is_update_dependencies] == true ? true : false
            update_dependencies(isDebug: true, isCleanCache: is_clean_carthage_cache)
        end
        
        if options[:is_export] == true ? true : false
#            cocoapods(repo_update: true)
            version = get_version_number(target: Constant::PRODUCT_NAME::BASE)
            update_plist ({
                          "NewRelicAppVersionString" => "#{version}-DEV",
                          "NewRelicBuildTagString" => build_number,
                          "Environment" => "Stage"
                          })
            increment_build_number(build_number: build_number)
            update_bundle_id "#{Constant::BundleID::BASE::DEV}"
            update_project_team(teamid: "#{Constant::TeamID::DEV}")
            code_sign_dev
            fileName = "#{Constant::PRODUCT_NAME::BASE}#{version}(#{build_number})_dev"
            ipa_path = gym(configuration: "Debug",
            output_directory: output,
            output_name: fileName,
            sdk: "#{Constant::SDK::IPHONE}",
            archive_path: "#{output}/#{fileName}",
            clean:true,
            derived_data_path: derivedDataPath,
            include_bitcode: isCompileBitcode,
            export_options:{compileBitcode: isCompileBitcode,
                           method: "ad-hoc",
                           signingCertificate: "iPhone Distribution",
                           signingStyle: "manual",
                           stripSwiftSymbols: true,
                           teamID: Constant::TeamID::DEV,
                           provisioningProfiles: {"#{Constant::BundleID::BASE::DEV}" => "#{Constant::ProvisioningProfile::BASE::NAME::DEV}"},
                           thinning: "<#{is_thin}>"
            })
                                         
            if options[:is_upload_to_hockeyapp] == true ? true : false
                upload_to_hockeyapp_dev(ipa_path)
            end
        end
    end
    
    desc "AppStore build"
    lane :app_store do |options|
        
        is_clean_carthage_cache = options[:is_clean_carthage_cache] == true ? true : false
        updateAppVersion(options[:app_version])
        if options[:is_update_dependencies] == true ? true : false
            update_dependencies(isCleanCache: is_clean_carthage_cache)
        end
        
        new_folder_id = nil
        if options[:is_export] == true ? true : false
#            cocoapods(repo_update: true)
            version = get_version_number(target: "#{Constant::PRODUCT_NAME::BASE}")
            update_plist ({
                          "NewRelicAppVersionString" => "#{version}",
                          "NewRelicBuildTagString" => build_number,
                          "Environment" => "Default"
                          })
#            clean_plist_release
            increment_build_number(build_number: build_number)
            update_bundle_id "#{Constant::BundleID::BASE}"
            code_sign_diqa
            appStoreFileName = "#{Constant::PRODUCT_NAME::BASE}_#{version}(#{build_number})_AppStore"
            gym(configuration: "Release",
             output_directory: output,
                  output_name: appStoreFileName,
                          sdk: "#{Constant::SDK::IPHONE}",
                 archive_path: "#{output}/#{appStoreFileName}",
                        clean:true,
            derived_data_path: derivedDataPath,
              include_bitcode: isCompileBitcode,
               export_options:{
                                compileBitcode: isCompileBitcode,
                                method: "app-store",
                                signingCertificate: "iPhone Distribution",
                                signingStyle: "manual",
                                stripSwiftSymbols: true,
                                teamID: Constant::TeamID::PRODUCTION,
                                provisioningProfiles: {"#{Constant::BundleID::BASE::PRODUCTION}" => "#{Constant::ProvisioningProfile::BASE::NAME::PRODUCTION}"},
                              }
                )
                              
            if options[:is_upload_to_googledrive] == true ? true : false
                new_appStoreFileName = "#{Constant::PRODUCT_NAME::BASE}_#{version}\\\(#{build_number}\\\)_AppStore"
                new_folder_id = upload_zip_build_to_google_drive("#{Constant::PRODUCT_NAME::BASE}_#{version}", "#{build_number}", [File.expand_path("../#{output}/#{new_appStoreFileName}.ipa"), File.expand_path("../#{output}/#{new_appStoreFileName}.app.dSYM.zip")], File.expand_path("../#{output}"), "#{Constant::PRODUCT_NAME::BASE}_#{version}-AppStore-Build-#{build_number}")
            end
                              
        end
    end
    
    desc "Re-Sign builds"
    lane :re_sign_build do |options|
        
        path = options[:path]
        type = options[:type]
        if type == "dev"
            update_app_extention_bundle_id(path,false)
            re_sign_dev_build(path)
            
            elsif type == "ad_hoc"
            update_app_extention_bundle_id(path,true)
            re_sign_ad_hoc_build(path)
            
            elsif type == "ingestion"
            update_ingestion_app_extention_bundle_id(path)
            re_sign_ingestion_build(path)
            else
            puts "Please follow the parameters type:dev/ad_hoc path:path_to_the_ipa"
        end
    end
end

after_all do |lane, options|
    # This block is called, only if the executed lane was successful
    #rocket
end

# Methods
def update_dependencies(isDebug: false, isCleanCache: false)
    begin
        if isCleanCache == true
            clean_carthage_cache
        end
        
        carthage(command: "update",
                 use_ssh: false,
                 use_submodules: false,
                 use_binaries: true,
                 no_build: false,
                 no_skip_current: false,
                 verbose: false,
                 platform: "iOS",
                 new_resolver: true,
                 configuration: isDebug == true ? "Debug" : "Release",
                 cache_builds: !isCleanCache)
    end
end

def code_sign_dev
    begin
        disable_automatic_code_signing(team_id: "#{Constant::TeamID::DEV}",
                                       targets: ["#{Constant::PRODUCT_NAME::BASE}"],
                                       code_sign_identity: "iPhone Distribution",
                                       profile_name: "#{Constant::ProvisioningProfile::BASE::NAME::DEV}",
                                       profile_uuid: "#{Constant::ProvisioningProfile::BASE::UUID::DEV}",
                                       bundle_identifier: "#{Constant::BundleID::BASE::DEV}")
#        disable_automatic_code_signing(team_id: "#{Constant::TeamID::DEV}",
#                                       targets: ["PushContentExtension"],
#                            code_sign_identity: "iPhone Distribution",
#                                  profile_name: "NotificationContentProvision",
#                                  profile_uuid: "bf96d346-9ade-469c-a96a-a249b1e24e58",
#                             bundle_identifier: "com.wayne.FastfileTest.NotificationContentExtension")
#        disable_automatic_code_signing(team_id: "86BD45EKTC",
#                                       targets: ["PushServiceExtension"],
#                            code_sign_identity: "iPhone Distribution",
#                                  profile_name: "NotificationServiceProvision",
#                                  profile_uuid: "cc4f2bb4-cc6f-442e-9183-5761ad4ec046",
#                             bundle_identifier: "com.wayne.FastfileTest.NotificationServiceExtension")
    end
end

def code_sign_diqa
    begin
        disable_automatic_code_signing(team_id: "#{Constant::TeamID::PRODUCTION}",
                                       targets: ["#{Constant::PRODUCT_NAME::BASE}"],
                                       code_sign_identity: "#{Constant::SingingIdentity::PRODUCTION}",
                                       profile_name: "#{Constant::ProvisioningProfile::BASE::NAME::PRODUCTION}",
                                       profile_uuid: "#{Constant::ProvisioningProfile::BASE::UUID::PRODUCTION}",
                                       bundle_identifier: "#{Constant::BundleID::BASE::PRODUCTION}")
#        disable_automatic_code_signing(team_id: "WZ62FEL3UG",
#                                       targets: ["PushContentExtension"],
#                            code_sign_identity: "iPhone Distribution",
#                                  profile_name: "NotificationContentExtension_app_store_distrib",
#                                  profile_uuid: "44e928ce-4032-4528-bdc2-27651ab0a141",
#                             bundle_identifier: "com.NotificationContentExtension")
#        disable_automatic_code_signing(team_id: "WZ62FEL3UG",
#                                       targets: ["PushServiceExtension"],
#                            code_sign_identity: "iPhone Distribution",
#                                  profile_name: "NotificationServiceExtension_app_store_distrib",
#                                  profile_uuid: "662053ac-e626-4fa2-9a8d-98151a73bbd4",
#                             bundle_identifier: "com.NotificationServiceExtension")
    end
end

def updateAppVersion(version)
    begin
        if !version.nil?
            update_plist ({ "CFBundleShortVersionString" => version })
#            update_push_content_extension_plist ({ "CFBundleShortVersionString" => version })
#            update_push_service_extension_plist ({ "CFBundleShortVersionString" => version })
        end
    end
end

def update_push_content_extension_plist(keysValues)
    begin
        update_info_plist(plist_path: "./PushContentExtension/Info.plist",
                          block: lambda { |plist|
                          keysValues.each do |key, value|
                          plist[key] = value
                          end
                          })
    end
end

def update_push_service_extension_plist(keysValues)
    begin
        update_info_plist(plist_path: "./PushServiceExtension/Info.plist",
                          block: lambda { |plist|
                          keysValues.each do |key, value|
                          plist[key] = value
                          end
                          })
    end
end

def update_app_extention_bundle_id(path, isAdhoc)
    begin
        resign_service_bundle_id = "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_SERVICE_EXTENSION}"
        resign_content_bundle_id = "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_CONTENT_EXTENSION}"
        if isAdhoc == true
            resign_service_bundle_id = "#{Constant::ProvisioningProfile::ADHOC::Identity::NOTIFICATION_SERVICE_EXTENSION}"
            resign_content_bundle_id = "#{Constant::ProvisioningProfile::ADHOC::Identity::NOTIFICATION_CONTENT_EXTENSION}"
        end
        ipa_root_path = File.dirname("#{path}")
        old_zip_path = "#{ipa_root_path}/#{Constant::PRODUCT_NAME::BASE}.zip"
        payload_path = "#{ipa_root_path}/Payload"
        sh("mv #{path} #{old_zip_path}")
        unzip(file: "#{old_zip_path}",destination_path:"#{ipa_root_path}")
        sh("rm #{old_zip_path}")
        pushServiceExtensionPath = "#{ipa_root_path}/Payload/#{Constant::PRODUCT_NAME::BASE}.app/PlugIns/#{Constant::PRODUCT_NAME::NOTIFICATION_SERVICE_EXTENSION}.appex/Info.plist"
        pushContentExtensionPath = "#{ipa_root_path}/Payload/#{Constant::PRODUCT_NAME::BASE}.app/PlugIns/#{Constant::PRODUCT_NAME::NOTIFICATION_CONTENT_EXTENSION}.appex/Info.plist"
        sh("plutil -replace CFBundleIdentifier -string #{resign_service_bundle_id} #{pushServiceExtensionPath}")
        sh("plutil -replace CFBundleIdentifier -string #{resign_content_bundle_id} #{pushContentExtensionPath}")
        resign_zip_path = "#{ipa_root_path}/#{Constant::PRODUCT_NAME::BASE}"
        zip(path: payload_path, output_path: resign_zip_path)
        sh("mv #{old_zip_path} #{path}")
        sh("rm -r #{payload_path}")
    end
end

def update_dev_app_extention_bundle_id(path)
    begin
        resign_service_bundle_id = "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_SERVICE_EXTENSION}"
        resign_content_bundle_id = "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_CONTENT_EXTENSION}"
        ipa_root_path = File.dirname("#{path}")
        file = File.basename("#{path}")
        old_zip_path = "#{ipa_root_path}/#{Constant::PRODUCT_NAME::BASE}.zip"
        payload_path = "#{ipa_root_path}/Payload"
        sh("mv #{path} #{old_zip_path}")
        unzip(file: "#{old_zip_path}",destination_path:"#{ipa_root_path}")
        sh("rm #{old_zip_path}")
        pushServiceExtensionPath = "#{ipa_root_path}/Payload/#{Constant::PRODUCT_NAME::BASE}.app/PlugIns/#{Constant::PRODUCT_NAME::NOTIFICATION_SERVICE_EXTENSION}.appex/Info.plist"
        pushContentExtensionPath = "#{ipa_root_path}/Payload/#{Constant::PRODUCT_NAME::BASE}.app/PlugIns/#{Constant::PRODUCT_NAME::NOTIFICATION_CONTENT_EXTENSION}.appex/Info.plist"
        sh("plutil -replace CFBundleIdentifier -string #{resign_service_bundle_id} #{pushServiceExtensionPath}")
        sh("plutil -replace CFBundleIdentifier -string #{resign_content_bundle_id} #{pushContentExtensionPath}")
        resign_zip_path = "#{ipa_root_path}/#{Constant::PRODUCT_NAME::BASE}"
        sh("cd #{ipa_root_path}; zip -r #{Constant::PRODUCT_NAME::BASE}.zip . *")
        sh("mv #{old_zip_path} #{path}")
        
        sh("cd #{ipa_root_path} && find . ! -name #{file} -type f -delete && find . ! -name #{file} -type d -delete")
    end
end

def update_bundle_id(bundle_id)
    begin
        update_app_identifier(xcodeproj: "#{Constant::PRODUCT_NAME::BASE}.xcodeproj",
                              plist_path: "./#{Constant::PRODUCT_NAME::BASE}/Info.plist",
                              app_identifier: bundle_id)
    end
end

def upload_to_hockeyapp_dev(ipaPath)
    begin
        if !File.exist? ("#{ipaPath}")
            puts "#{ipaPath} not found"
            return
        end
        
        ipaRootPath = File.dirname("#{ipaPath}")
        dsymPath = "#{ipaRootPath}/#{Constant::PRODUCT_NAME::BASE}.app.dSYM.zip"
        if !File.exist? ("#{dsymPath}")
            puts "#{dsymPath} not found"
            return
        end
        
        hockey(ipa: "#{ipaPath}",
               dsym: "#{dsymPath}",
               public_identifier: "47527881a6b93bac1e6f25e71ccc6e77",
               api_token: "47f28b429a944cb8bb4d96dba3d79bc9",
               notify: "0",
               notes: "")
    end
end

def re_sign_dev_build(path)
    username = who_am_i
    resign(ipa: path, signing_identity: Constant::SingingIdentity::DEV,
           bundle_id:Constant::BundleId::DEV,
           provisioning_profile: {
           "#{Constant::ProvisioningProfile::DEV::Identity::BASE}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::DEV::UUID::BASE}.mobileprovision",
           "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_SERVICE_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::DEV::UUID::NOTIFICATION_SERVICE_EXTENSION}.mobileprovision",
           "#{Constant::ProvisioningProfile::DEV::Identity::NOTIFICATION_CONTENT_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::DEV::UUID::NOTIFICATION_CONTENT_EXTENSION}.mobileprovision"
           })
end

def re_sign_ad_hoc_build(path)
    username = who_am_i
    resign(ipa: path, signing_identity: Constant::SingingIdentity::ADHOC,
           bundle_id: Constant::BundleId::ADHOC,
           provisioning_profile: {
           "#{Constant::ProvisioningProfile::ADHOC::Identity::BASE}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::ADHOC::UUID::BASE}.mobileprovision",
           "#{Constant::ProvisioningProfile::ADHOC::Identity::NOTIFICATION_SERVICE_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::ADHOC::UUID::NOTIFICATION_SERVICE_EXTENSION}.mobileprovision",
           "#{Constant::ProvisioningProfile::ADHOC::Identity::NOTIFICATION_CONTENT_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::ADHOC::UUID::NOTIFICATION_CONTENT_EXTENSION}.mobileprovision"
           })
end

def re_sign_ingestion_build(path)
    username = who_am_i
    resign(ipa: path,
           signing_identity: Constant::SingingIdentity::INGESTION,
           bundle_id: Constant::BundleId::INGESTION,
           provisioning_profile: {
           "#{Constant::ProvisioningProfile::INGESTION::Identity::BASE}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::INGESTION::UUID::BASE}.mobileprovision",
           "#{Constant::ProvisioningProfile::INGESTION::Identity::NOTIFICATION_SERVICE_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::INGESTION::UUID::NOTIFICATION_SERVICE_EXTENSION}.mobileprovision",
           "#{Constant::ProvisioningProfile::INGESTION::Identity::NOTIFICATION_CONTENT_EXTENSION}" => "/Users/#{username}/Library/MobileDevice/Provisioning Profiles/#{Constant::ProvisioningProfile::INGESTION::UUID::NOTIFICATION_CONTENT_EXTENSION}.mobileprovision"
           })
end

def clean_plist_release
    begin
        delete_plist_all_value_except("./Resources/Configurations/Services.plist", ["default"])
        delete_plist_by_path_strings("./Resources/Configurations/3rdPartyConfiguration.plist", ["BaiduAPIKey/com.land.dev", "JPushAppKey/com.land.dev", "AMapAppKey/com.land.dev"])
        delete_plist_by_path_strings("./Info.plist", ["NSAppTransportSecurity/NSExceptionDomains/6045a845dbd4420883661e56c85c99af.com", "NSAppTransportSecurity/NSExceptionDomains/c00.adobe.com", "NSAppTransportSecurity/NSExceptionDomains/go.com", "NSAppTransportSecurity/NSExceptionDomains/lt01.service-internal.com", "NSAppTransportSecurity/NSExceptionDomains/stage.service-internal.com", "NSAppTransportSecurity/NSExceptionDomains/starwave.com",
                                     "NSAppTransportSecurity/NSExceptionDomains/service-internal-hkdl-cn-prod.starwave.com","NSAppTransportSecurity/NSExceptionDomains/alipay.com","NSAppTransportSecurity/NSExceptionDomains/alipayobjects.com"])
    end
end

